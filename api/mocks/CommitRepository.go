// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	models "github.com/djfemz/savannahTechTask/api/models"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// CommitRepository is an autogenerated mock type for the CommitRepository type
type CommitRepository struct {
	mock.Mock
}

// CountCommits provides a mock function with given fields:
func (_m *CommitRepository) CountCommits() (int64, error) {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *CommitRepository) FindAll() ([]*models.Commit, error) {
	ret := _m.Called()

	var r0 []*models.Commit
	if rf, ok := ret.Get(0).(func() []*models.Commit); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Commit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllByDateSince provides a mock function with given fields: since
func (_m *CommitRepository) FindAllByDateSince(since *time.Time) ([]*models.Commit, error) {
	ret := _m.Called(since)

	var r0 []*models.Commit
	if rf, ok := ret.Get(0).(func(*time.Time) []*models.Commit); ok {
		r0 = rf(since)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Commit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*time.Time) error); ok {
		r1 = rf(since)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *CommitRepository) FindById(id uint) (*models.Commit, error) {
	ret := _m.Called(id)

	var r0 *models.Commit
	if rf, ok := ret.Get(0).(func(uint) *models.Commit); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Commit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCommitsForRepoByName provides a mock function with given fields: name
func (_m *CommitRepository) FindCommitsForRepoByName(name string) ([]*models.Commit, error) {
	ret := _m.Called(name)

	var r0 []*models.Commit
	if rf, ok := ret.Get(0).(func(string) []*models.Commit); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Commit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMostRecentCommit provides a mock function with given fields:
func (_m *CommitRepository) FindMostRecentCommit() (*models.Commit, error) {
	ret := _m.Called()

	var r0 *models.Commit
	if rf, ok := ret.Get(0).(func() *models.Commit); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Commit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTopCommitAuthors provides a mock function with given fields: size
func (_m *CommitRepository) FindTopCommitAuthors(size int) ([]*models.Author, error) {
	ret := _m.Called(size)

	var r0 []*models.Author
	if rf, ok := ret.Get(0).(func(int) []*models.Author); ok {
		r0 = rf(size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Author)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: commit
func (_m *CommitRepository) Save(commit *models.Commit) (*models.Commit, error) {
	ret := _m.Called(commit)

	var r0 *models.Commit
	if rf, ok := ret.Get(0).(func(*models.Commit) *models.Commit); ok {
		r0 = rf(commit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Commit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Commit) error); ok {
		r1 = rf(commit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveAll provides a mock function with given fields: commits
func (_m *CommitRepository) SaveAll(commits []*models.Commit) error {
	ret := _m.Called(commits)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*models.Commit) error); ok {
		r0 = rf(commits)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCommitRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommitRepository creates a new instance of CommitRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommitRepository(t mockConstructorTestingTNewCommitRepository) *CommitRepository {
	mock := &CommitRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
